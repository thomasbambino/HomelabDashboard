# Secure Production Docker Compose Configuration
# For internet-facing deployment with security hardening

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # No external ports - only accessible via reverse proxy
    expose:
      - "5000"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - PORT=5000
      # Use strong password for database
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/gamelab
      # Firebase Configuration (required)
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
      - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
      - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
      # Security - MUST be strong random string
      - SESSION_SECRET=${SESSION_SECRET}
      # Optional services
      - MAILGUN_API_KEY=${MAILGUN_API_KEY:-}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN:-}
      - MAILGUN_FROM_EMAIL=${MAILGUN_FROM_EMAIL:-}
      - AMP_API_URL=${AMP_API_URL:-}
      - AMP_API_USERNAME=${AMP_API_USERNAME:-}
      - AMP_API_PASSWORD=${AMP_API_PASSWORD:-}
      - TAUTULLI_URL=${TAUTULLI_URL:-}
      - TAUTULLI_API_KEY=${TAUTULLI_API_KEY:-}
      - HDHOMERUN_URL=${HDHOMERUN_URL:-}
    volumes:
      - app_uploads:/app/uploads:rw
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - internal
    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - DAC_OVERRIDE

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=gamelab
    # NO EXTERNAL PORTS - Internal only
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - internal
    # Security hardening
    security_opt:
      - no-new-privileges:true

  # Reverse proxy for SSL and security
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - internal
      - external
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  nginx_cache:
    driver: local

networks:
  internal:
    driver: bridge
    internal: true  # No external access
  external:
    driver: bridge